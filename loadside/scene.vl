Scene {
  id: scen
  text: "Отображение графов"

  FontAwesome {}

  Param {
    id: nSet
    min: 1
    max: 2
    text: "Номер набора"
    //valEnabled: false
  }

  property var fileBase: Qt.resolvedUrl( nSet.value == 1 ? "../graphs1/Gamma" : "../graphs2/Gamma" );

  Param {
    id: nParam
    min: nSet.value == 1 ? 1 : 1
    max: nSet.value == 1 ? 2872 : 4117
    //max: 2872 //было 2357, 14115 
    text: "Номер графа"
    //valEnabled: false
  }

  Row {
    property var tag: "left"
    spacing: 5
    /*
    Text {
      y:3
      text: "Переход:"
    }
    */
    Button {
      text: "<<"
      onClicked: nParam.value = nParam.value > nParam.min ? nParam.value-1 : nParam.max;
    }
    Button {
      text: ">>"
      onClicked: nParam.value = nParam.value < nParam.max ? nParam.value+1 : nParam.min;
    }

    /* надо делать нормальный редактируемый комбо для Param
    ComboBox {
      model: { var acc = [nParam.min]; var i0=100; var i1=nParam.max; for (var i=i0; i<i1; i+=100) acc.push(i); acc.push( i1 ); return acc; }
      onCurrentTextChanged: nParam.value = Number( currentText );
    }
    */
  }

  Text { 
    property var tag: "left"; text: ' '; height: 10
  }

  Text { 
    property var tag: "left"
    text: '<i class="fa fa-arrow-down fa-lg"></i> '
    color: "grey"
    height: 20
  }

  property var fileName: fileBase + nParam.value
  onFileNameChanged: fileParam.value = fileName
  DataParam {
    text: "Файл графа"
    id: fileParam
  }

  TextLoader {
    file: fileParam.value
    onOutputChanged: graphText = output
    // console.log( output.split("\n").length );
  }

  Text { 
    property var tag: "left"
    text: '<i class="fa fa-arrow-down fa-lg"></i> '
    color: "grey"
    height: 20
  }

  property var graphText: ""

  Column {
    id: grContentBlock
    //css.border: "1px solid grey"; css.borderRadius: "4px"; css.padding: "4px"
    property var tag: "left"
    Text {
      text: "Содержимое графа, строк: " + graphLines.length
    }
    /*
    Button {
      text: "Редактировать"
      onClicked: fileParam.dataDialog.prepare_and_open();
    }
    */
  }

  property var graphLines: graphText.split("\n")
  //property var graphHeadLine: graphText[0]
  //property var graphRebraLines: graphText.slice( 1 );

}
